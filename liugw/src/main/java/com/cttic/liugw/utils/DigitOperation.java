package com.cttic.liugw.utils;

/**
 * 数字运算
 * 
 * @author liugaowei
 *
 */
public class DigitOperation {

    /**
     * 原码： 符号位 加上 数字的二进制表示。 例如： int 类型的 10 ：
     *          10的原码：00000000 00000000 00000000 00001010
     *         -10的原码：10000000 00000000 00000000 00001010
     *         绝对值相同的两个正数 和 负数 只有符号位不同。
     */

    /**
     * 反码： 在原码的基础上， 符号位不变， 其余位取反。
     *       -10的反码：11111111 11111111 11111111 11110101
     *        10的反码：01111111 11111111 11111111 11110101
     */

    /**
     * 补码： 正数的补码 就是 原码本身； 负数的补码是反码加1
     *      -10的补码：11111111 11111111 11111111 11110110
     *       10的补码：00000000 00000000 00000000 00001010
     */

    /**
     * 查看整数中每一位是多少. 可以发现： 数字在计算机中是按补码进行保存的
     * 
     * 相对于原码， 使用补码进行存储，有以下好处：
     * 1. 可以统一数字0的表示。 0既不是正数也不是负数。 使用原码表示， 符号位不好确定。
     * 2. 使用补码可以简化整数的加减法； 减法计算可以视为加法计算， 实现加减法的统一。
     * 
     */
    public static void printIntDigit(int a) {
        System.out.println("a=" + a);
        // int 有32位
        for (short i = 0; i < 32; i++) {
            int t = (a & (0x80000000 >>> i)) >>> (31 - i);
            System.out.print(t);
        }
        System.out.println("\n================================");
    }

    public static void main(String[] args) {
        printIntDigit(-10);
        printIntDigit(10);
    }
}
